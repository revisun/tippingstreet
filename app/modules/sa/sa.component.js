"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const lot_model_1 = require("../shared/lot/lot.model");
let SaComponent = class SaComponent {
    constructor() {
        this.text = 'Seller\'s Account Calculation';
        this.baLot = new lot_model_1.Lot();
        this.baLot.lotSizeSQM = 0;
        this.baLot.FMV = 0;
        this.baLot.sellPrice = 0;
        this.baLot.zonalValue = 0;
        this.baLot.profFeeRate = 0;
        this.baLot.nonStdExpenses = 0;
    }
    submit() {
        if (this.baLot.sellPrice != 0) {
            this.lotCalc();
        }
    }
    lotCalc() {
        if (Number.isNaN(this.baLot.lotSizeSQM) || (Number(this.baLot.lotSizeSQM) === 0)) {
            this.baLot.pricePerSQM = 0;
        }
        else {
            this.baLot.pricePerSQM = Number((this.baLot.sellPrice / this.baLot.lotSizeSQM).toFixed(2));
        }
        this.baLot.taxBase = Math.max(Number(this.baLot.zonalValue), Number(this.baLot.sellPrice)).toFixed(2);
        this.baLot.capitalGainsTax = Number((this.baLot.taxBase * .06).toFixed(2));
        this.baLot.docsStamp = Number((this.baLot.taxBase * .015).toFixed(2));
        this.baLot.profFee = Number(Number(Number(this.baLot.sellPrice) * Number(this.baLot.profFeeRate)).toFixed(2));
        this.baLot.otherExpenses = Number(this.baLot.nonStdExpenses).toFixed(2);
        this.baLot.netProceeds = Number(Number(Number(this.baLot.sellPrice) - Number(this.baLot.capitalGainsTax) - Number(this.baLot.docsStamp) - Number(this.baLot.profFee) - Number(this.baLot.otherExpenses)).toFixed(2));
    }
};
SaComponent = __decorate([
    core_1.Component({
        selector: 'sa',
        templateUrl: 'modules/sa/sa.component.html',
        changeDetection: core_1.ChangeDetectionStrategy.OnPush
    }),
    __metadata("design:paramtypes", [])
], SaComponent);
exports.SaComponent = SaComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2EuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2EuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQW1FO0FBQ25FLHVEQUE4QztBQVE5QyxJQUFhLFdBQVcsR0FBeEI7SUFJRTtRQUhBLFNBQUksR0FBVywrQkFBK0IsQ0FBQztRQUk3QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksZUFBRyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELE1BQU07UUFDSixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNqQixDQUFDO0lBQ0gsQ0FBQztJQUVELE9BQU87UUFFTCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0YsQ0FBQztRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckcsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVHLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQzdCLE1BQU0sQ0FDSixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FDakssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQ2IsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFBO0FBdENZLFdBQVc7SUFOdkIsZ0JBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxJQUFJO1FBQ2QsV0FBVyxFQUFFLDhCQUE4QjtRQUMzQyxlQUFlLEVBQUUsOEJBQXVCLENBQUMsTUFBTTtLQUNoRCxDQUFDOztHQUVXLFdBQVcsQ0FzQ3ZCO0FBdENZLGtDQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMb3QgfSBmcm9tICcuLi9zaGFyZWQvbG90L2xvdC5tb2RlbCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3NhJyxcclxuICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvc2Evc2EuY29tcG9uZW50Lmh0bWwnLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgU2FDb21wb25lbnQge1xyXG4gIHRleHQ6IHN0cmluZyA9ICdTZWxsZXJcXCdzIEFjY291bnQgQ2FsY3VsYXRpb24nO1xyXG4gIGJhTG90OiBMb3Q7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCl7XHJcbiAgICB0aGlzLmJhTG90ID0gbmV3IExvdCgpO1xyXG4gICAgdGhpcy5iYUxvdC5sb3RTaXplU1FNID0gMDtcclxuICAgIHRoaXMuYmFMb3QuRk1WID0gMDtcclxuICAgIHRoaXMuYmFMb3Quc2VsbFByaWNlID0gMDtcclxuICAgIHRoaXMuYmFMb3Quem9uYWxWYWx1ZSA9IDA7XHJcbiAgICB0aGlzLmJhTG90LnByb2ZGZWVSYXRlID0gMDtcclxuICAgIHRoaXMuYmFMb3Qubm9uU3RkRXhwZW5zZXMgPSAwO1xyXG4gIH1cclxuXHJcbiAgc3VibWl0KCl7XHJcbiAgICBpZiAodGhpcy5iYUxvdC5zZWxsUHJpY2UgIT0gMCkge1xyXG4gICAgICB0aGlzLmxvdENhbGMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGxvdENhbGMoKSB7XHJcblxyXG4gICAgaWYgKE51bWJlci5pc05hTih0aGlzLmJhTG90LmxvdFNpemVTUU0pfHwoTnVtYmVyKHRoaXMuYmFMb3QubG90U2l6ZVNRTSkgPT09IDApKSB7XHJcbiAgICAgIHRoaXMuYmFMb3QucHJpY2VQZXJTUU0gPSAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5iYUxvdC5wcmljZVBlclNRTSA9IE51bWJlcigodGhpcy5iYUxvdC5zZWxsUHJpY2UvdGhpcy5iYUxvdC5sb3RTaXplU1FNKS50b0ZpeGVkKDIpKTtcclxuICAgIH1cclxuICAgIHRoaXMuYmFMb3QudGF4QmFzZSA9IE1hdGgubWF4KE51bWJlcih0aGlzLmJhTG90LnpvbmFsVmFsdWUpLE51bWJlcih0aGlzLmJhTG90LnNlbGxQcmljZSkpLnRvRml4ZWQoMik7XHJcbiAgICB0aGlzLmJhTG90LmNhcGl0YWxHYWluc1RheCA9IE51bWJlcigodGhpcy5iYUxvdC50YXhCYXNlKi4wNikudG9GaXhlZCgyKSk7XHJcbiAgICB0aGlzLmJhTG90LmRvY3NTdGFtcCA9IE51bWJlcigodGhpcy5iYUxvdC50YXhCYXNlKi4wMTUpLnRvRml4ZWQoMikpO1xyXG4gICAgdGhpcy5iYUxvdC5wcm9mRmVlID0gTnVtYmVyKE51bWJlcihOdW1iZXIodGhpcy5iYUxvdC5zZWxsUHJpY2UpKk51bWJlcih0aGlzLmJhTG90LnByb2ZGZWVSYXRlKSkudG9GaXhlZCgyKSk7XHJcbiAgICB0aGlzLmJhTG90Lm90aGVyRXhwZW5zZXMgPSBOdW1iZXIodGhpcy5iYUxvdC5ub25TdGRFeHBlbnNlcykudG9GaXhlZCgyKTtcclxuICAgIHRoaXMuYmFMb3QubmV0UHJvY2VlZHMgPSBOdW1iZXIoXHJcbiAgICAgIE51bWJlcihcclxuICAgICAgICBOdW1iZXIodGhpcy5iYUxvdC5zZWxsUHJpY2UpIC0gTnVtYmVyKHRoaXMuYmFMb3QuY2FwaXRhbEdhaW5zVGF4KSAtIE51bWJlcih0aGlzLmJhTG90LmRvY3NTdGFtcCkgLSBOdW1iZXIodGhpcy5iYUxvdC5wcm9mRmVlKSAtIE51bWJlcih0aGlzLmJhTG90Lm90aGVyRXhwZW5zZXMpXHJcbiAgICAgICkudG9GaXhlZCgyKVxyXG4gICAgKTtcclxuICB9XHJcbn0iXX0=