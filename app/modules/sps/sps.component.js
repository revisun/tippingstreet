"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const lot_model_1 = require("../shared/lot/lot.model");
let SpsComponent = class SpsComponent {
    constructor() {
        this.text = 'Selling Price Simulation';
        this.baLot = new lot_model_1.Lot();
        this.baLot.netProceeds = 0;
        this.baLot.profFeeRate = 0;
        this.baLot.nonStdExpenses = 0;
    }
    submit() {
        if (this.baLot.netProceeds != 0 && this.baLot.profFeeRate != 0) {
            this.lotCalc();
        }
    }
    lotCalc() {
        var vTaxFactor1;
        var vTaxFactor2;
        vTaxFactor1 = 1 - 0.06 - 0.015 - this.baLot.profFeeRate;
        console.log(vTaxFactor1);
        vTaxFactor2 = this.baLot.nonStdExpenses / ((this.baLot.netProceeds / vTaxFactor1) + this.baLot.nonStdExpenses);
        console.log(vTaxFactor2);
        console.log(this.baLot.netProceeds / vTaxFactor1);
        console.log(((this.baLot.netProceeds / vTaxFactor1) + this.baLot.nonStdExpenses));
        this.baLot.capitalGainsTax = (this.baLot.netProceeds / (1 - .06 - .015 - this.baLot.profFeeRate - vTaxFactor2) * .06).toLocaleString('en', { style: 'currency' });
        this.baLot.docsStamp = (this.baLot.netProceeds / (1 - .06 - .015 - this.baLot.profFeeRate - vTaxFactor2) * .015).toLocaleString();
        this.baLot.profFee = (this.baLot.netProceeds / (1 - .06 - .015 - this.baLot.profFeeRate - vTaxFactor2) * this.baLot.profFeeRate).toLocaleString();
        this.baLot.otherExpenses = (this.baLot.netProceeds / (1 - .06 - .015 - this.baLot.profFeeRate - vTaxFactor2) * vTaxFactor2).toLocaleString();
        this.baLot.sellPrice = (+this.baLot.netProceeds + +this.baLot.capitalGainsTax + +this.baLot.docsStamp + +this.baLot.profFee + +this.baLot.otherExpenses).toLocaleString();
    }
};
SpsComponent = __decorate([
    core_1.Component({
        selector: 'sps',
        templateUrl: 'modules/sps/sps.component.html',
        changeDetection: core_1.ChangeDetectionStrategy.OnPush
    }),
    __metadata("design:paramtypes", [])
], SpsComponent);
exports.SpsComponent = SpsComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNwcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3Q0FBbUU7QUFDbkUsdURBQThDO0FBTzlDLElBQWEsWUFBWSxHQUF6QjtJQUlFO1FBSEEsU0FBSSxHQUFXLDBCQUEwQixDQUFDO1FBSXhDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxlQUFHLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsTUFBTTtRQUNKLEVBQUUsQ0FBQyxDQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsSUFBSSxDQUFFLENBQUMsQ0FBQSxDQUFDO1lBQ2hFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNqQixDQUFDO0lBQ0gsQ0FBQztJQUVELE9BQU87UUFFSCxJQUFJLFdBQW1CLENBQUM7UUFDeEIsSUFBSSxXQUFtQixDQUFDO1FBRXhCLFdBQVcsR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQztRQUN4RCxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pCLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUMsV0FBVyxDQUFDLEdBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMzRyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUMsV0FBVyxDQUFDLEdBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFBO1FBRTdFLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLElBQUksR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBQyxXQUFXLENBQUMsR0FBQyxHQUFHLENBQUMsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLEVBQUMsS0FBSyxFQUFDLFVBQVUsRUFBQyxDQUFDLENBQUM7UUFDbkosSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLEdBQUMsSUFBSSxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFDLFdBQVcsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3RILElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLElBQUksR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBQyxXQUFXLENBQUMsR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3RJLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLElBQUksR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBQyxXQUFXLENBQUMsR0FBQyxXQUFXLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNqSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBRTdLLENBQUM7Q0FFSCxDQUFBO0FBckNZLFlBQVk7SUFMeEIsZ0JBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxLQUFLO1FBQ2YsV0FBVyxFQUFFLGdDQUFnQztRQUM3QyxlQUFlLEVBQUUsOEJBQXVCLENBQUMsTUFBTTtLQUNoRCxDQUFDOztHQUNXLFlBQVksQ0FxQ3hCO0FBckNZLG9DQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMb3QgfSBmcm9tICcuLi9zaGFyZWQvbG90L2xvdC5tb2RlbCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3NwcycsXHJcbiAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL3Nwcy9zcHMuY29tcG9uZW50Lmh0bWwnLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTcHNDb21wb25lbnQge1xyXG4gIHRleHQ6IHN0cmluZyA9ICdTZWxsaW5nIFByaWNlIFNpbXVsYXRpb24nO1xyXG4gIGJhTG90OiBMb3Q7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCl7XHJcbiAgICB0aGlzLmJhTG90ID0gbmV3IExvdCgpO1xyXG4gICAgdGhpcy5iYUxvdC5uZXRQcm9jZWVkcyA9IDA7XHJcbiAgICB0aGlzLmJhTG90LnByb2ZGZWVSYXRlID0gMDtcclxuICAgIHRoaXMuYmFMb3Qubm9uU3RkRXhwZW5zZXMgPSAwO1xyXG4gIH1cclxuXHJcbiAgc3VibWl0KCl7XHJcbiAgICBpZiAoIHRoaXMuYmFMb3QubmV0UHJvY2VlZHMgIT0gMCAmJiB0aGlzLmJhTG90LnByb2ZGZWVSYXRlICE9IDAgKXtcclxuICAgICAgdGhpcy5sb3RDYWxjKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBsb3RDYWxjKCkge1xyXG5cclxuICAgICAgdmFyIHZUYXhGYWN0b3IxOiBudW1iZXI7XHJcbiAgICAgIHZhciB2VGF4RmFjdG9yMjogbnVtYmVyO1xyXG5cclxuICAgICAgdlRheEZhY3RvcjEgPSAxIC0gMC4wNiAtIDAuMDE1IC0gdGhpcy5iYUxvdC5wcm9mRmVlUmF0ZTtcclxuICAgICAgY29uc29sZS5sb2codlRheEZhY3RvcjEpO1xyXG4gICAgICB2VGF4RmFjdG9yMiA9IHRoaXMuYmFMb3Qubm9uU3RkRXhwZW5zZXMgLyAoKHRoaXMuYmFMb3QubmV0UHJvY2VlZHMvdlRheEZhY3RvcjEpK3RoaXMuYmFMb3Qubm9uU3RkRXhwZW5zZXMpO1xyXG4gICAgICBjb25zb2xlLmxvZyh2VGF4RmFjdG9yMik7XHJcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMuYmFMb3QubmV0UHJvY2VlZHMvdlRheEZhY3RvcjEpO1xyXG4gICAgICBjb25zb2xlLmxvZygoKHRoaXMuYmFMb3QubmV0UHJvY2VlZHMvdlRheEZhY3RvcjEpK3RoaXMuYmFMb3Qubm9uU3RkRXhwZW5zZXMpKVxyXG5cclxuICAgICAgdGhpcy5iYUxvdC5jYXBpdGFsR2FpbnNUYXggPSAodGhpcy5iYUxvdC5uZXRQcm9jZWVkcy8oMS0uMDYtLjAxNS10aGlzLmJhTG90LnByb2ZGZWVSYXRlLXZUYXhGYWN0b3IyKSouMDYpLnRvTG9jYWxlU3RyaW5nKCdlbicsIHtzdHlsZTonY3VycmVuY3knfSk7XHJcbiAgICAgIHRoaXMuYmFMb3QuZG9jc1N0YW1wID0gKHRoaXMuYmFMb3QubmV0UHJvY2VlZHMvKDEtLjA2LS4wMTUtdGhpcy5iYUxvdC5wcm9mRmVlUmF0ZS12VGF4RmFjdG9yMikqLjAxNSkudG9Mb2NhbGVTdHJpbmcoKTtcclxuICAgICAgdGhpcy5iYUxvdC5wcm9mRmVlID0gKHRoaXMuYmFMb3QubmV0UHJvY2VlZHMvKDEtLjA2LS4wMTUtdGhpcy5iYUxvdC5wcm9mRmVlUmF0ZS12VGF4RmFjdG9yMikqdGhpcy5iYUxvdC5wcm9mRmVlUmF0ZSkudG9Mb2NhbGVTdHJpbmcoKTtcclxuICAgICAgdGhpcy5iYUxvdC5vdGhlckV4cGVuc2VzID0gKHRoaXMuYmFMb3QubmV0UHJvY2VlZHMvKDEtLjA2LS4wMTUtdGhpcy5iYUxvdC5wcm9mRmVlUmF0ZS12VGF4RmFjdG9yMikqdlRheEZhY3RvcjIpLnRvTG9jYWxlU3RyaW5nKCk7XHJcbiAgICAgIHRoaXMuYmFMb3Quc2VsbFByaWNlID0gKCt0aGlzLmJhTG90Lm5ldFByb2NlZWRzICsgK3RoaXMuYmFMb3QuY2FwaXRhbEdhaW5zVGF4ICsgK3RoaXMuYmFMb3QuZG9jc1N0YW1wICsgK3RoaXMuYmFMb3QucHJvZkZlZSArICt0aGlzLmJhTG90Lm90aGVyRXhwZW5zZXMpLnRvTG9jYWxlU3RyaW5nKCk7XHJcblxyXG4gICB9XHJcblxyXG59Il19